clc;clear all;
n = 2;% input('Enter number of buildings in urban environment: ');
%rotate3d;
z = 300;
const1 = 0;const2 = 500;
R = [250,350,0];%input('Enter the point on the road: ');
a = [380,375,0];%input('Enter centre of building: ');
ad = [220,180,100];%input('Enter [l,w,h] of building: ');
la = ad(1,1);wa = ad(1,2);ha = ad(1,3);
a1 = a + [wa/2,la/2,ha];
a2 = a + [wa/2,-la/2,ha];
a3 = a + [-wa/2,-la/2,ha];
a4 = a + [-wa/2,la/2,ha];
b =  [380,125,0];%input('Enter centre of building: ');
bd = [220,180,300];%input('Enter [l,w,h] of building: ');
lb = bd(1,1);wb = bd(1,2);hb = bd(1,3);
b1 = b + [wb/2,lb/2,hb];
b2 = b + [wb/2,-lb/2,hb];
b3 = b + [-wb/2,-lb/2,hb];
b4 = b + [-wb/2,lb/2,hb];
c = [120,125,0];%input('Enter centre of building: ');
cd = [220,180,200];%input('Enter [l,w,h] of building: ');
lc = cd(1,1);wc = ad(1,2);hc = cd(1,3);
c1 = c + [wc/2,lc/2,hc];
c2 = c + [wc/2,-lc/2,hc];
c3 = c + [-wc/2,-lc/2,hc];
c4 = c + [-wc/2,lc/2,hc];
d =  [120,375,0];%input('Enter centre of duilding: ');
dd = [220,180,250];%input('Enter [l,w,h] of building: ');
ld = dd(1,1);wd = dd(1,2);hd = dd(1,3);
d1 = d + [wd/2,ld/2,hd];
d2 = d + [wd/2,-ld/2,hd];
d3 = d + [-wd/2,-ld/2,hd];
d4 = d + [-wd/2,ld/2,hd];

if (R(1,1)<=a3(1,1)) && (R(1,2)<=a4(1,2)) && (R(1,2) >= a3(1,2))
P1(1,1) = R(1,1) + (a4(1,1) - R(1,1))*((const2 - R(1,2))/(a4(1,2) - R(1,2)));P1(1,2) = const2;
P2(1,1) = R(1,1) + (a4(1,1) - R(1,1))*(z/ha);P2(1,2) = R(1,2) + (a4(1,2) - R(1,2))*(z/ha);
P3(1,1) = R(1,1) + (a3(1,1) - R(1,1))*(z/ha);P3(1,2) = R(1,2) + (a3(1,2) - R(1,2))*(z/ha);
P4(1,1) = const2;P4(1,2) = R(1,2) + (a3(1,2) - R(1,2))*((const2 - R(1,1))/(a3(1,1) - R(1,1)));
P5(1,1) = const2;P5(1,2) = R(1,2) + (b1(1,2) - R(1,2))*((const2 - R(1,1))/(b1(1,1) - R(1,1)));
P6(1,1) = R(1,1) + (b1(1,1) - R(1,1))*(z/hb);P6(1,2) = R(1,2) + (b1(1,2) - R(1,2))*(z/hb);
P7(1,1) = R(1,1) + (b3(1,1) - R(1,1))*(z/hb);P7(1,2) = R(1,2) + (b3(1,2) - R(1,2))*(z/hb);
P8(1,1) = R(1,1) + (b3(1,1) - R(1,1))*((const1 - R(1,2))/(b3(1,2) - R(1,2)));P8(1,2) = const1;
P9(1,1) = R(1,1) + (c2(1,1) - R(1,1))*((const1 - R(1,2))/(c2(1,2) - R(1,2)));P9(1,2) = const1;
P10(1,1) = R(1,1) + (c2(1,1) - R(1,1))*(z/hc);P10(1,2) = R(1,2) + (c2(1,2) - R(1,2))*(z/hc);
P11(1,1) = R(1,1) + (c4(1,1) - R(1,1))*(z/hc);P11(1,2) = R(1,2) + (c4(1,2) - R(1,2))*(z/hc);
P12(1,1) = const1;P12(1,2) = R(1,2) + (c4(1,2) - R(1,2))*((const1 - R(1,1))/(c4(1,1) - R(1,1)));
P13(1,1) = const1;P13(1,2) = R(1,2) + (d2(1,2) - R(1,2))*((const1 - R(1,1))/(d2(1,1) - R(1,1)));
P14(1,1) = R(1,1) + (d2(1,1) - R(1,1))*(z/hd);P14(1,2) = R(1,2) + (d2(1,2) - R(1,2))*(z/hd);
P15(1,1) = R(1,1) + (d1(1,1) - R(1,1))*(z/hd);P15(1,2) = R(1,2) + (d1(1,2) - R(1,2))*(z/hd);
P16(1,1) = R(1,1) + (d1(1,1) - R(1,1))*((const2 - R(1,2))/(d1(1,2) - R(1,2)));P16(1,2) = const2;

X = [P1(1,1) P2(1,1) P3(1,1) P4(1,1) P5(1,1) P6(1,1) P7(1,1) P8(1,1) P9(1,1) P10(1,1) P11(1,1) P12(1,1) P13(1,1) P14(1,1) P15(1,1) P16(1,1)];
Y = [P1(1,2) P2(1,2) P3(1,2) P4(1,2) P5(1,2) P6(1,2) P7(1,2) P8(1,2) P9(1,2) P10(1,2) P11(1,2) P12(1,2) P13(1,2) P14(1,2) P15(1,2) P16(1,2)];
end

if (R(1,1)<=b3(1,1)) && (R(1,2)<=b4(1,2)) && (R(1,2) >= b3(1,2))
P1(1,1) = R(1,1) + ((a2(1,1) - R(1,1))*((c1 - R(1,2))/(a2(1,2) - R(1,2))));P1(1,2) = 0;
P2(1,1) = R(1,1) + (a2(1,1) - R(1,1))*(z/ha);P2(1,2) = R(1,2) + (a2(1,2) - R(1,2))*(z/ha);
P3(1,1) = R(1,1) + (a1(1,1) - R(1,1))*(z/ha);P3(1,2) = R(1,2) + (a1(1,2) - R(1,2))*(z/ha);
P4(1,1) = R(1,1) + (a1(1,1) - R(1,1))*((c2 - R(1,2))/(a1(1,2) - R(1,2)));P4(1,2) = 500;
P5(1,1) = R(1,1) + (b3(1,1) - R(1,1))*((c1 - R(1,2))/(b3(1,2) - R(1,2)));P5(1,2) = 0;
P6(1,1) = R(1,1) + (b3(1,1) - R(1,1))*(z/hb);P6(1,2) = R(1,2) + (b3(1,2) - R(1,2))*(z/hb);
P7(1,1) = R(1,1) + (b4(1,1) - R(1,1))*(z/hb);P7(1,2) = R(1,2) + (b4(1,2) - R(1,2))*(z/hb);
P8(1,1) = R(1,1) + (b4(1,1) - R(1,1))*((c2 - R(1,2))/(b4(1,2) - R(1,2)));P8(1,2) = 500;
X = [P1(1,1) P2(1,1) P3(1,1) P4(1,1) P8(1,1) P7(1,1) P6(1,1) P5(1,1)];
Y = [P1(1,2) P2(1,2) P3(1,2) P4(1,2) P8(1,2) P7(1,2) P6(1,2) P5(1,2)];
end

patch(X,Y,'green');
axis([const1 const2 const1 const2]);
axis('square');